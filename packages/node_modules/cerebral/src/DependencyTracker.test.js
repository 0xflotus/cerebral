/* eslint-env mocha */
import DependencyTracker from './DependencyTracker'
import { Compute } from './'
import { state, props } from './tags'
import assert from 'assert'

describe('DependencyTracker', () => {
  test('should set value when run', () => {
    const computed = Compute(() => {
      return 'foo'
    })
    const tracker = new DependencyTracker(computed)
    tracker.run()
    assert.equal(tracker.value, 'foo')
  })
  test('should track paths when run', () => {
    const computed = Compute((get) => {
      return get(state`foo`) + get(props`bar`)
    })
    const tracker = new DependencyTracker(computed)
    tracker.run(() => 'bar', { bar: 'foo' })
    assert.equal(tracker.value, 'barfoo')
    assert.deepEqual(tracker.stateTrackMap, { foo: {} })
    assert.deepEqual(tracker.propsTrackMap, { bar: {} })
  })
  test('should track child paths when run', () => {
    const computed = Compute((get) => {
      return get(state`foo`) + get(props`bar.baz`)
    })
    const tracker = new DependencyTracker(computed)
    tracker.run(() => 'bar', { bar: { baz: 'foo' } })
    assert.equal(tracker.value, 'barfoo')
    assert.deepEqual(tracker.stateTrackMap, { foo: {} })
    assert.deepEqual(tracker.propsTrackMap, { bar: { children: { baz: {} } } })
  })
  test('should pass props getter when run', () => {
    const computed = Compute((get) => {
      return get(props`foo`)
    })
    const tracker = new DependencyTracker(computed)
    tracker.run(() => {}, { foo: 'bar' })
    assert.equal(tracker.value, 'bar')
  })
  test('should be able to match state changes map', () => {
    const tracker = new DependencyTracker()
    tracker.stateTrackMap = {
      foo: {
        children: {
          bar: {},
        },
      },
    }
    assert.equal(
      tracker.match(
        [
          {
            path: ['foo', 'bar'],
          },
        ],
        {}
      ),
      true
    )
  })
  test('should be able to match props changes map', () => {
    const tracker = new DependencyTracker()
    tracker.propsTrackMap = {
      foo: {
        children: {
          bar: {},
        },
      },
    }
    assert.equal(
      tracker.match({}, [
        {
          path: ['foo', 'bar'],
        },
      ]),
      true
    )
  })
})
